
//Вариант 10. Заданы два упорядоченных по возрастанию массива.Составить из
//их значений третий, также упорядоченный по возрастанию(слияние).

#include <stdio.h>
#define SIZE(x) (sizeof(x) / sizeof((x)[0]))

int main()
{
	int a[] = { 1, 3, 7, 8, 9 };
	int b[] = { 1, 2, 3, 4, 5, 7, 8 };
	int c[SIZE(a) + SIZE(b)];
	int i = 0;
	int j = 0;
	int k = 0;
	// Находим наименьший элемент массивов и вставляем в сборный массив
	while (i < SIZE(a) && j < SIZE(b))
	{
		if (a[i] <= b[j])
		{
			c[k] = a[i];
			++i;
		}
		else
		{
			c[k] = b[j];
			++j;
		}
		// Проверяем закончился ли 1-ый массив, если "ДА", то остаток 1-го заливаем в сборный.
		++k;
	}
	/*if (SIZE(a) < SIZE(b))
	{
		c[k] = a[i]
			i++;
			k++;

			}*/

	if (a < SIZE(a) && b == SIZE(b))
	{
		c[k++] = a[i++];
	}else
	{
	c[k++] = b[j++];
		}

	/*}
	else
	{

		c[k++] = b[j++];


	
}*/
		//while (a[i] < SIZE(a))
		/*	if (SIZE(a) < SIZE(b))
		{
			c[k] = a[i];
			++i;
			++k;
		}
		// Проверяем закончился ли 2-ой массив, если "ДА", то остаток 2-го заливаем в сборный.
		//while (b[j] < SIZE(b))
			else
		{
			c[k] = b[j];
			++j;
			++k; 
		}*/
		// Выводим сборный массив
		for (i = 0; i < SIZE(c); i++)
			printf("%d ", c[i]);	
	getchar();
	return 0;
}
/*if (a < N && A[a] < B[b] || b == N)
	{C[c++] = A[a++];
	C[c++] = B[b++];
	})*/
//SIZE(a)) < SIZE(b)
